{
    "collab_server" : "",
    "contents" : "file.name <- 'C:/Users/akd4572/Desktop/np2.png'\ncgm.data=cgm.full\ninformative.cgm.meta\n\nhourly_boxplot <- function(cgm.data, informative.cgm.meta,\n                           file.name=NULL){\n\n  ### percent of within target range for each hourly\n  ## for each hour, get the highest value, per month\n  cgm.data.month <- split(cgm.data, f=cgm.data$TP)\n  cgm.data.month.hour <- lapply(cgm.data.month, function(x) split(x, f=x$Hour))\n\n  cgm.mh.info <- lapply(names(cgm.data.month.hour), function(month){\n    lapply(names(cgm.data.month.hour[[month]]), function(hour){\n\n      temp <- cgm.data.month.hour[[month]][[hour]]\n      temp <- temp[temp$Event_Type=='EGV', ]\n\n      per.in.range <- paste0(round((100*sum(temp$TARGET=='On Target',na.rm=TRUE)/sum(!is.na(temp$TARGET))), 2), '%')\n      df.info <- data.frame(TP=month,\n                            Hour=hour,\n                            text=per.in.range,\n                            YMAX=max(temp$Glucose_Value_mg_dL, na.rm=TRUE),\n                            stringsAsFactors=FALSE)\n      return(df.info)\n\n    })\n  })\n\n  df.text <- lapply(cgm.mh.info, function(x){\n    do.call(rbind, x)\n  })\n\n  df.text <- do.call(rbind, df.text)\n  df.text$TP <- factor(df.text$TP, levels=levels(cgm.data$TP))\n\n  cgm.spline.list <- lapply(names(cgm.data.month), function(month){\n\n    temp <- cgm.data.month[[month]][cgm.data.month[[month]]$Event_Type=='EGV', ]\n    temp <- temp[!is.na(temp$Glucose_Value_mg_dL), ]\n    temp$Time_v2 <- (temp$Hour*60)+temp$Min\n\n    #matrix_gam <- data.table::data.table(Glucose=temp[, 'Glucose_Value_mg_dL'],\n    #                                     Hourly=temp[ ,'Hour'],\n    #                                     Daily=temp[, 'Day'],\n    #                                     Hourly_Sq=(temp[,'Hour'])^2)\n\n    #gamm_1 <- gamm(Glucose~s(Hourly, bs='cc') + s(Daily, bs='cs'),\n    #               data=matrix_gam, family=gaussian, correlation=corAR1(form=~1|Daily))\n    #gam_1 <- gam(Glucose~s(Hourly, bs='cc') + s(Daily, bs='cs'),\n    #             data=matrix_gam, family=gaussian, correlation=corAR1(form=~1|Daily))\n\n    matrix_gam <- data.table::data.table(Glucose=temp[, 'Glucose_Value_mg_dL'],\n                                         Time_v2=temp[, 'Time_v2'],\n                                         Day=temp[,'Day'])\n    matrix_gam$Day <- as.factor(matrix_gam$Day)\n\n    gam_1 <- mgcv::gam(Glucose~s(Time_v2) +\n                         s(Day, Time_v2, bs='re'),\n                       data=matrix_gam)\n\n\n   # gam_1 <- mgcv::gam(Glucose~s(Minute, bs='cc') + s(Hourly, bs='cs'),\n  #               data=matrix_gam, family=gaussian, correlation=corAR1(form=~1|Hourly))\n\n\n    datas <- data.table::data.table(value=gam_1$fitted,\n                                    Time=temp[, 'Time_v2'],\n                                    Hour=temp[,'Hour'],\n                                    Day=temp[, 'Day'])\n\n    datas[, TP := rep(month, nrow(datas))][, Model := rep('Simple', nrow(datas))]\n\n\n\n    return(datas)\n\n\n  })\n\n  #cgm.spline.list <- lapply(cgm.spline.list, function(x){\n  #  month <- x$TP[1]\n  #  temp.table <- as.data.frame(table(round(x$value, 4),\n  #                                    x$Day_Time),\n  #                              stringsAsFactors=FALSE)\n  #  temp.table <- temp.table[which(temp.table$Freq!=0), ]\n  #  temp.table$TP <- month;temp.table\n  #})\n\n  ## take mean of fitted value for each hour?\n  cgm.spline.list <- lapply(cgm.spline.list, function(x){\n    month <- x$TP[1]\n    list.x <- split(x, f=x$Hour)\n    hour.mean <- lapply(list.x, function(x){\n      gluc.mean <- mean(x$value, na.rm=TRUE)\n      hour <- x$Hour[1]\n      return(data.frame(gluc.mean=gluc.mean,\n                        hour=hour,\n                        stringsAsFactors=FALSE))\n    })\n    hour.mean <- do.call(rbind, hour.mean)\n    hour.mean$TP <- month;hour.mean\n  })\n\n  spline.plot.data <- do.call(rbind, cgm.spline.list)\n  spline.plot.data$TP <- factor(spline.plot.data$TP,\n                              levels=levels(cgm.data$TP))\n  #spline.plot.data$Var1 <- as.numeric(spline.plot.data$Var1)\n\n  hr.bp <- ggplot(data=cgm.data[cgm.data$Event_Type=='EGV', ], aes(x=factor(Hour), y=Glucose_Value_mg_dL)) +\n    geom_boxplot(outlier.size=2.5) +\n    facet_wrap(.~TP, ncol=1) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=0, ymax=as.numeric(`Urgent Low`), xmin=-Inf, xmax=Inf), fill='#FF0000', alpha=0.1, inherit.aes=FALSE) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=as.numeric(`Urgent Low`), ymax=as.numeric(Low), xmin=-Inf, xmax=Inf), fill='#FFA500', alpha=0.1, inherit.aes=FALSE) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=as.numeric(High), ymax=Inf, xmin=-Inf, xmax=Inf), fill='#FFFF00', alpha=0.1, inherit.aes=FALSE) +\n    geom_text(data=df.text, aes(x=factor(Hour), y=YMAX, label=text), vjust=-1, inherit.aes=FALSE) +\n    geom_line(data=spline.plot.data, aes(x=factor(hour), y=gluc.mean, group=1), inherit.aes=FALSE, colour='blue', size=1) +\n    theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n          panel.background=element_blank(), axis.line=element_line(colour='black'),\n          axis.title=element_text(size=30),\n          axis.text=element_text(size=30),\n          strip.text.x=element_text(size=30),\n          plot.title=element_text(size=40, hjust=0.5)) +\n    ylim(0, (max(cgm.data$Glucose_Value_mg_dL, na.rm=TRUE)+25))+\n    ylab('Glucose Value mg/dL') +\n    xlab('Hour of the Day') +\n    ggtitle('Hourly Trends Across Time Points')\n\n  if(!is.null(file.name)){\n    print({\n      png(filename=file.name,\n          width=1800, height=1000)\n      hr.bp\n    })\n    dev.off()\n  }\n\n  return(hr.bp)\n}\n",
    "created" : 1552586471907.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2686905965",
    "id" : "39FA27D2",
    "lastKnownWriteTime" : 1552675419,
    "last_content_update" : 1552675420468,
    "path" : "R:/PrevMed/Projects/HAPO/Alan/CGM/Scripts/cgm.hourly.plot.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}