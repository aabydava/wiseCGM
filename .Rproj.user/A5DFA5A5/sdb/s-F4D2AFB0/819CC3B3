{
    "collab_server" : "",
    "contents" : "#' Stacked Time Series Plot\n#'\n#' Generate Time Series Plot from all three time points stacked on top of each other\n#' @param cgm.data A dataframe of CGM data formatted by format_dexcom() for a patient, containing all timepoints\n#' @param informative.cgm.meta A dataframe of CGM meta data formatted by format_dexcom()\n#' @param file.name The name of the output file\n#' @export\n#'\nstacked_time_series_plot <- function(cgm.data, informative.cgm.meta,\n                                     file.name=NULL){\n\n  ## calculate summary statistics to place on title\n  cgm.data.list <- split(cgm.data, f=cgm.data$TP)\n  df.info.mean <- lapply(cgm.data.list, function(x){\n    round(mean(x$Glucose_Value_mg_dL, na.rm=TRUE), 2)\n  })\n\n  df.info.sd <- lapply(cgm.data.list, function(x){\n    round(sd(x$Glucose_Value_mg_dL, na.rm=TRUE), 2)\n  })\n\n  df.info.percent.wir <- lapply(cgm.data.list, function(x){\n    round(100*(sum(x$TARGET=='On Target', na.rm=TRUE))/(sum(!is.na(x$TARGET))), 2)\n  })\n\n  df.info <- lapply(names(cgm.data.list), function(month){\n    data.frame(TP=month,\n               INFO=paste0(month, ': ', df.info.mean[[month]], ' (', df.info.sd[[month]], '), ', df.info.percent.wir[[month]], '%'),\n               stringsAsFactors=FALSE)\n  })\n  df.info <- do.call(rbind, df.info)\n\n  info.order <- sapply(names(cgm.data.list), function(month){\n    df.info[grep(month, df.info$TP), 'INFO']\n  })\n\n  cgm.data <- merge(cgm.data, df.info, by='TP', all=TRUE)\n\n  cgm.data$INFO <- factor(cgm.data$INFO, levels=info.order)\n\n#  cgm.spline.list <- lapply(names(cgm.data.list), function(month){\n\n#    temp <- cgm.data.list[[month]][cgm.data.list[[month]]$Event_Type=='EGV', ]\n#    temp <- temp[!is.na(temp$Glucose_Value_mg_dL), ]\n\n\n#    matrix_gam <- data.table::data.table(Glucose=temp[, 'Glucose_Value_mg_dL'],\n#                                         Hourly=temp[ ,'Hour'],\n#                                         Daily=temp[, 'Day'],\n#                                         Hourly_Sq=(temp[,'Hour'])^2)\n\n#    gam_1 <- gam(Glucose~s(Hourly, bs='cr', k=12) + s(Daily, bs='ps', k=24),\n#                 data=matrix_gam, family=gaussian)\n\n#    datas <- data.table::data.table(value=gam_1$fitted.values,\n#                                    Day_Time=temp[,'Day_Time'])\n\n#    datas[, TP := rep(month, nrow(datas))][, Model := rep('Simple', nrow(datas))]\n\n\n#    ## refit with using same smoothed function to both variable f(x1) x f(x2) or f(x1, x2)\n#    gam_2 <-  gam(Glucose~s(Hourly, Daily),\n#                  data=matrix_gam, family=gaussian)\n#\n#    gam_3 <- gam(Glucose~s(Hourly, Hourly_Sq, Daily),\n#                 data=matrix_gam, family=gaussian)\n\n#    summary(gam_3)\n\n#    ## refit with tensor product interaction\n#    gam_tensor<- gam(Glucose~te(Hourly, Daily,\n#                                k=c(12, 24),\n#                                bs=c('cr', 'ps')),\n#                     data=matrix_gam, family=gaussian)\n\n    #return(datas)\n\n\n  #})\n\n  ##plot(cgm.spline.list[[1]]$gam)\n  ##names(cgm.spline.list) <- names(cgm.data.list)\n  ##spline.plot.data <- lapply(names(cgm.spline.list), function(month){\n  ##  original <-  temp <- cgm.data.list[[month]][cgm.data.list[[month]]$Event_Type=='EGV', ]\n  ##\n  ##  temp <- cgm.spline.list[[month]]\n  ##  plot.data <- plot(cgm.spline.list[[month]]$gam, residuals=TRUE)\n  ##\n  ##  keep.data <- data.frame(Day_Time=plot.data[[1]]$x,\n  ##                          smoothed.values=plot.data[[1]]$fit,\n  ##                          TP=month,\n  ##                          stringsAsFactors=FALSE)\n  ##  return(keep.data)\n  ##\n  ##})\n  ##spline.plot.data <- do.call(rbind, spline.plot.data)\n  ##spline.plot.data <- merge(spline.plot.data, df.info, by='TP', all=TRUE)\n\n  #spline.plot.data <- do.call(rbind, cgm.spline.list)\n  #spline.plot.data <- merge(spline.plot.data, df.info, by='TP', all=TRUE)\n  #spline.plot.data$INFO <- factor(spline.plot.data$INFO, levels=levels(cgm.data$INFO))\n\n  stacked.ts <- ggplot(data=cgm.data[cgm.data$Event_Type=='EGV', ], aes(x=Day_Time, y=Glucose_Value_mg_dL)) +\n    geom_point(size=1) +\n    geom_point(data=cgm.data[cgm.data$Event_Type=='Calibration', ], aes(x=Day_Time, y=Glucose_Value_mg_dL), colour='red', size=1) +\n    facet_wrap(.~INFO, ncol=1) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=0, ymax=as.numeric(`Urgent Low`), xmin=-Inf, xmax=Inf), fill='#FF0000', alpha=0.1, inherit.aes=FALSE) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=as.numeric(`Urgent Low`), ymax=as.numeric(Low), xmin=-Inf, xmax=Inf), fill='#FFA500', alpha=0.1, inherit.aes=FALSE) +\n    geom_rect(data=informative.cgm.meta, aes(ymin=as.numeric(High), ymax=Inf, xmin=-Inf, xmax=Inf), fill='#FFFF00', alpha=0.1, inherit.aes=FALSE) +\n    # geom_line(data=spline.plot.data, aes(x=Day_Time, y=value), inherit.aes=FALSE, colour='blue') +\n    theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n          panel.background=element_blank(), axis.line=element_line(colour='black'),\n          axis.title=element_text(size=30),\n          axis.text=element_text(size=30),\n          strip.text.x=element_text(size=30),\n          plot.title=element_text(size=40, hjust=0.5)) +\n    ylab('Glucose Value mg/dL') +\n    xlab('Day') +\n    ggtitle('Daily Trends Across Time Points') +\n    scale_x_continuous(breaks=as.numeric(names(table(cgm.data$Day))))\n\n  if(!is.null(file.name)){\n    print({\n      png(filename=file.name,\n          width=1800, height=1000)\n      stacked.ts\n    })\n    dev.off()\n  }\n\n  return(stacked.ts)\n}\n\nutils::globalVariables(c('cgm.data', 'informative.cgm.meta',\n                         'file.name', 'png', 'dev.off'))\n",
    "created" : 1550505940073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4131522668",
    "id" : "819CC3B3",
    "lastKnownWriteTime" : 1551378587,
    "last_content_update" : 1551378587547,
    "path" : "R:/PrevMed/Projects/HAPO/Alan/CGM/Scripts/wiseCGM/R/stacked_time_series_plot.R",
    "project_path" : "R/stacked_time_series_plot.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}